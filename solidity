// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/access/AccessControl.sol";

contract MechanicReputation is AccessControl {
    bytes32 public constant VERIFIER_ROLE = keccak256("VERIFIER_ROLE");
    
    struct MechanicProfile {
        uint256 reputationScore;
        uint256 completedServices;
        uint256 disputeCount;
        string[] certifications;
        mapping(string => bool) specializations;
    }

    mapping(address => MechanicProfile) private _mechanics;
    mapping(bytes32 => address[]) private _specializedMechanics;

    event MechanicVerified(address indexed mechanic, string[] certifications);
    event ServiceCompleted(address indexed mechanic, uint256 scoreChange);
    event DisputeFiled(address indexed mechanic, uint256 penalty);

    constructor() {
        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _grantRole(VERIFIER_ROLE, msg.sender);
    }

    function verifyMechanic(
        address mechanic,
        string[] calldata certifications,
        string[] calldata specializations
    ) external onlyRole(VERIFIER_ROLE) {
        MechanicProfile storage profile = _mechanics[mechanic];
        
        for (uint i = 0; i < certifications.length; i++) {
            profile.certifications.push(certifications[i]);
        }

        for (uint i = 0; i < specializations.length; i++) {
            profile.specializations[specializations[i]] = true;
            bytes32 specHash = keccak256(abi.encodePacked(specializations[i]));
            _specializedMechanics[specHash].push(mechanic);
        }

        profile.reputationScore = 100; // Base score
        emit MechanicVerified(mechanic, certifications);
    }

    function updateReputation(
        address mechanic,
        int256 scoreDelta,
        bool hasDispute
    ) external onlyRole(VERIFIER_ROLE) {
        MechanicProfile storage profile = _mechanics[mechanic];
        
        if (scoreDelta > 0) {
            profile.reputationScore += uint256(scoreDelta);
            profile.completedServices++;
        } else {
            profile.reputationScore = profile.reputationScore > uint256(-scoreDelta) ? 
                profile.reputationScore - uint256(-scoreDelta) : 0;
        }

        if (hasDispute) {
            profile.disputeCount++;
            emit DisputeFiled(mechanic, uint256(-scoreDelta));
        }

        emit ServiceCompleted(mechanic, scoreDelta);
    }

    function getMechanicProfile(address mechanic) external view returns (
        uint256 score,
        uint256 services,
        uint256 disputes,
        string[] memory certs
    ) {
        MechanicProfile storage profile = _mechanics[mechanic];
        return (
            profile.reputationScore,
            profile.completedServices,
            profile.disputeCount,
            profile.certifications
        );
    }

    function findSpecialists(string calldata specialization) external view returns (address[] memory) {
        bytes32 specHash = keccak256(abi.encodePacked(specialization));
        return _specializedMechanics[specHash];
    }
}// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/utils/Strings.sol";

contract ModNFTsAutomotive is ERC721, Ownable {
    using Counters for Counters.Counter;
    
    struct VehicleDetails {
        string vin;
        uint256 mileage;
        address[] previousOwners;
        VehicleType vehicleType;
        bool isElectric;
        uint256 batteryCapacity; // kWh for EVs
        uint256 displacement; // CC for combustion
    }

    struct ServiceRecord {
        uint256 timestamp;
        address mechanic;
        string serviceDetails;
        bytes32 ipfsHash;
    }

    enum VehicleType { CLASSIC, MODERN, CUSTOM }

    Counters.Counter private _tokenIdCounter;
    mapping(uint256 => VehicleDetails) private _vehicleData;
    mapping(uint256 => ServiceRecord[]) private _serviceHistory;
    mapping(address => uint256) private _mechanicReputation;

    event VehicleMinted(address indexed owner, uint256 tokenId, VehicleType vType);
    event ServiceRecordAdded(uint256 tokenId, address mechanic);
    event OwnershipTransferred(uint256 tokenId, address from, address to);

    constructor() ERC721("modNFTs Automotive", "MODA") Ownable(msg.sender) {}

    // Core Minting Function
    function mintVehicle(
        address to,
        string memory vin,
        VehicleType vehicleType,
        bool isElectric,
        uint256 powerSpec
    ) public returns (uint256) {
        require(bytes(vin).length == 17, "Invalid VIN");
        
        uint256 tokenId = _tokenIdCounter.current();
        _tokenIdCounter.increment();

        _vehicleData[tokenId] = VehicleDetails({
            vin: vin,
            mileage: 0,
            previousOwners: new address[](0),
            vehicleType: vehicleType,
            isElectric: isElectric,
            batteryCapacity: isElectric ? powerSpec : 0,
            displacement: !isElectric ? powerSpec : 0
        });

        _safeMint(to, tokenId);
        emit VehicleMinted(to, tokenId, vehicleType);
        return tokenId;
    }

    // Automotive-Specific Functions
    function addServiceRecord(
        uint256 tokenId,
        address mechanic,
        string memory details,
        bytes32 ipfsHash
    ) public {
        require(_isApprovedOrOwner(msg.sender, tokenId), "Not authorized");
        require(_mechanicReputation[mechanic] > 0, "Unverified mechanic");
        
        _serviceHistory[tokenId].push(ServiceRecord({
            timestamp: block.timestamp,
            mechanic: mechanic,
            serviceDetails: details,
            ipfsHash: ipfsHash
        }));
        
        _mechanicReputation[mechanic]++;
        emit ServiceRecordAdded(tokenId, mechanic);
    }

    function transferVehicle(address to, uint256 tokenId) public {
        safeTransferFrom(msg.sender, to, tokenId);
        _vehicleData[tokenId].previousOwners.push(msg.sender);
        _vehicleData[tokenId].mileage += 1000; // Simulated usage
        emit OwnershipTransferred(tokenId, msg.sender, to);
    }

    // Mechanic Reputation System
    function verifyMechanic(address mechanic, string memory certURI) public onlyOwner {
        _mechanicReputation[mechanic] = 1;
        // Would include off-chain cert verification in real implementation
    }

    // Royalty System (ERC-2981 compatible)
    function royaltyInfo(uint256 tokenId, uint256 salePrice)
        public
        view
        returns (address receiver, uint256 royaltyAmount)
    {
        require(_exists(tokenId), "Nonexistent token");
        uint256 royalty = (salePrice * 750) / 10000; // 7.5% royalty
        return (owner(), royalty);
    }

    // Getters
    function getVehicleDetails(uint256 tokenId) public view returns (VehicleDetails memory) {
        return _vehicleData[tokenId];
    }

    function getServiceHistory(uint256 tokenId) public view returns (ServiceRecord[] memory) {
        return _serviceHistory[tokenId];
    }

    function getMechanicReputation(address mechanic) public view returns (uint256) {
        return _mechanicReputation[mechanic];
    }
}